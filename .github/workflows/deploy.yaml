name: Build and Deploy

on:
  push:
    branches:
      - main
    paths: app-codebase/**

jobs:
  npm-build:
    name: Code Build Phase
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps: 
      - name: Pull code
        uses: actions/checkout@v4
      
      # - name: Get npm cache directory
      #   id: npm-cache-dir
      #   shell: bash
      #   run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}

      # - name: Check cache hit
      #   uses: actions/cache@v4
      #   id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
      #   with:
      #     path: ${{ steps.npm-cache-dir.outputs.dir }}
      #     key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        working-directory: app-codebase
        run: npm ci

      - name: NPM Build
        working-directory: app-codebase
        run: npm run build

      # - name: SonarQube Scan
      #   uses: SonarSource/sonarqube-scan-action@v5.1.0
      #   env:
      #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      #   with:
      #     projectBaseDir: app-codebase
    
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: app-codebase/dist/

  docker-build:
    name: Docker Build and Push
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    needs:
      - npm-build
    env:
      REGISTRY: ghcr.io
    steps:
      - name: Pull code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
      
      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}
      
      - name: Docker image tags extract
        id: docker_tags
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ github.repository }}
          tags: |
            type=sha,format=long
            latest

      - name: Docker Build
        uses: docker/build-push-action@v6
        with:
          context: app-codebase
          push: true
          tags: ${{ steps.docker_tags.outputs.tags }}
          labels: ${{ steps.docker_tags.outputs.labels }}
        
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ github.repository }}:sha-${{ github.sha }}
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
      
      # - name: Trivy image scan
      #   run: trivy image ${{ env.REGISTRY }}/${{ github.repository }}:sha-${{ steps.docker_tags.output.tags }} --severity CRITICAL,HIGH --format table

      


      
        
      
      